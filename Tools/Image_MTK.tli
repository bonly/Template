/**
 *  @file Image_MTK.tli
 *
 *  @date 2012-4-25
 *  @author Bonly
 */
#include "Image.h"
//#include <stdlib.h>
#include <aeestdlib.h>

extern Graphics gpDC;
ResPool *imgPool = 0;

#define IMGSEG

/**
 * @def 定义变量
 */
#define RES(O,...) Obj *V_##O = 0;
#include "Resource.inc"
#undef RES

/**
 * @def 定义数组List
 */
#define RES(O,...) (Obj*) V_##O,
Obj*  imgList[]={
#include "Resource.inc"
};
#undef RES

/**
 * @def 定义初始化函数
 * 
 */
#define RES(X,P,F,T,W,H) \
static int load_##X(void* p) {\
    if(V_##X->obj == 0) \
    {\
       T_IMG *tmp = SafeNew T_IMG; \
       if (tmp == 0 ) return 1; \
       tmp->type = T; \
       if (T == BM_COPY) \
       { \
         JImage *img = Image_createImage(gpDC, #P#F);\
         if (img == 0) \
            return 1; \
         tmp->pImg = img; \
         tmp->width = img->getWidth();\
         tmp->height = img->getHeight();\
       } \
       if (T == BM_TRANSPARENT) \
       { \
         SxmAlphaImage* img = SxmCreateAlphaImage(#P#F); \
         if (img == 0) \
           return 1; \
         tmp->pImg = img; \
         tmp->width = W; \
         tmp->height = H; \
       } \
       V_##X->obj = tmp; \
    }\
    if(V_##X->obj == 0) return 1;else return 0; \
}
#include "Resource.inc"
#undef RES

/**
 * 补完整结构数据
 */
static void fix_relation()
{
    int i = 0;
#define IMGSEG
#define RES(X,...) \
    V_##X = SafeNew  Obj; \
    imgList[i] = V_##X; \
    imgList[i]->obj = 0; \
    imgList[i]->ID = i; \
    imgList[i]->create = load_##X; \
    ++i;
#include "Resource.inc"
#undef RES
#undef IMGSEG
}
#undef IMGSEG


static void delObj(int idx); ///< 删除对象

/** 
 * 初始化
 */
static int init(ResPool *resp)
{
    resp->List = imgList;
    resp->res_max = RES_MAX;
    resp->delObj = delObj;
    resp->fix_relation = fix_relation;

    return 0;
}

/**
 * 删除对象
 */
static void delObj(int idx) 
{
    if(idx >= imgPool->res_max || idx < 0) return;
    Img *tmpO = 0;
    if (tmpO = (Img*)imgPool->List[idx]->obj)
    {
      if (tmpO->pImg)
      {
        if (tmpO->type == BM_TRANSPARENT)
          SxmDestoryAlphaImage((SxmAlphaImage*)tmpO->pImg);
        if (tmpO->type == BM_COPY)
          delete (JImage*)tmpO->pImg;
      }
      delete (Img*)tmpO;
      imgPool->List[idx]->obj = 0;
    } 
}

Img* GETIMG(int x)
{
   return (Img*)RESP(&imgPool, init)->getObj(x)->obj;
}

void DELIMG(int x)
{
   RESP(&imgPool, init)->delObj(x);
}
